"use strict";(self.webpackChunkbadger_home=self.webpackChunkbadger_home||[]).push([[276],{3075:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return g}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],s={sidebar_position:1},l="API Usage",p={unversionedId:"guides/api-usage",id:"guides/api-usage",isDocsHomePage:!1,title:"API Usage",description:"Badger can be imported as a regular python package, and you could use the plugins/utils that Badger offers in your own python script.",source:"@site/docs/guides/api-usage.md",sourceDirName:"guides",slug:"/guides/api-usage",permalink:"/Badger/docs/guides/api-usage",editUrl:"https://github.com/SLAC-ML/Badger-Home/edit/master/docs/guides/api-usage.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial",permalink:"/Badger/docs/getting-started/tutorial"},next:{title:"CLI Usage",permalink:"/Badger/docs/guides/cli-usage"}},u=[{value:"Use an algorithm",id:"use-an-algorithm",children:[],level:2},{value:"Use an interface",id:"use-an-interface",children:[],level:2},{value:"Use an environment",id:"use-an-environment",children:[],level:2}],d={toc:u};function g(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"api-usage"},"API Usage"),(0,r.kt)("p",null,"Badger can be imported as a regular python package, and you could use the plugins/utils that Badger offers in your own python script."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Heads-up")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Make sure you have Badger ",(0,r.kt)("a",{parentName:"p",href:"../getting-started/installation"},"installed and setup"),"."))),(0,r.kt)("h2",{id:"use-an-algorithm"},"Use an algorithm"),(0,r.kt)("p",null,"Badger has a ",(0,r.kt)("inlineCode",{parentName:"p"},"get_algo")," API to get a specific algorithm."),(0,r.kt)("p",null,"The following code gets an algorithm named ",(0,r.kt)("inlineCode",{parentName:"p"},"silly")," (which is a random search algorithm) from Badger."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\nfrom badger.factory import get_algo\n\n# Define a test evaluate function\ndef evaluate(X):\n    Y = np.linalg.norm(X, axis=1).reshape(-1, 1)  # objectives\n    I = None  # inequality constraints\n    E = None  # equality constraints\n\n    # Show the progress\n    print(Y)\n\n    return Y, I, E\n\n# Get the silly algorithm from Badger\noptimize, configs = get_algo('silly')\n\n# Optimize the test evaluate function\noptimize(evaluate, configs['params'])\n")),(0,r.kt)("h2",{id:"use-an-interface"},"Use an interface"),(0,r.kt)("p",null,"Badger has a ",(0,r.kt)("inlineCode",{parentName:"p"},"get_intf")," API to get a specific interface."),(0,r.kt)("p",null,"The following code gets an interface named ",(0,r.kt)("inlineCode",{parentName:"p"},"silly")," and constructs an instance of the interface."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from badger.factory import get_intf\n\n# Get the silly interface from Badger\nInterface, configs = get_intf('silly')\nintf = Interface(configs['params'])\n\n# Test get/set channels\nintf.get_value('c1')\n# Output: 0\n\nintf.set_value('c1', 1.0)\nintf.get_value('c1')\n# Output: 1.0\n")),(0,r.kt)("h2",{id:"use-an-environment"},"Use an environment"),(0,r.kt)("p",null,"Badger has a ",(0,r.kt)("inlineCode",{parentName:"p"},"get_env")," API to get a specific environment."),(0,r.kt)("p",null,"The following code gets and instantiates an environment named ",(0,r.kt)("inlineCode",{parentName:"p"},"silly")," from Badger. Note that it uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"silly")," interface instance ",(0,r.kt)("inlineCode",{parentName:"p"},"intf")," from the ",(0,r.kt)("a",{parentName:"p",href:"#use-an-interface"},"last")," section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from badger.factory import get_env\n\n# Get the silly environment from Badger\nEnvironment, configs = get_env('silly')\nenv = Environment(intf, configs['params'])\n\n# Investigate the silly env\nenv.list_vars()\n# Output: ['q1', 'q2', 'q3', 'q4']\n\nenv.list_obses()\n# Output: ['l1', 'l2']\n\nenv.get_var('q1')  # q1 in env maps to c1 in intf\n# Output: 1.0\n\nenv.get_obs('l2')  # l2 norm of (q1, q2, q3, q4)\n# Output: 1.0\n\nenv.set_var('q2', 1)\nenv.get_obs('l2')\n# Output: 1.4142135623730951\n")),(0,r.kt)("p",null,"Now we can define an evaluate function based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"silly")," env, and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"silly")," algorithm from the ",(0,r.kt)("a",{parentName:"p",href:"#use-an-algorithm"},"use an algorithm")," section to optimize it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Define an evaluate function based on the env\ndef evaluate(X):\n    # Note that X is a 2D array\n    Y = []\n    for x in X:\n        env.set_vars(['q1', 'q2', 'q3', 'q4'][:len(x)], x)\n        y = env.get_obs('l2')\n        Y.append(y)\n    Y = np.array(Y).reshape(-1, 1)\n    I = None\n    E = None\n\n    # Show the progress\n    print(Y)\n\n    return Y, I, E\n\n# Optimize the evaluate function with silly algorithm\noptimize(evaluate, {'dimension': 4, 'max_iter': 42})\n")))}g.isMDXComponent=!0}}]);